BINARY SEARCH :

I/P : 5
      1 4 8 2 5
      8
O/P : Element is found at : 4

I/P : 5
      1 7 3 0 4
      2
O/P : Element is not present

CODE :

import java.util.*;
class  BinarySearch{
    static int binarySearch(int a[],int l,int h,int key)
    {
        while(l<h)
        {
        int mid=(l+h)/2;
        if(a[mid]==key)
            return mid;
        else if(key<a[mid])
            h=mid-1;
        else
            l=mid+1;
        }
        return -1;
    }
    public static void main(String[] args) {
        Scanner s=new Scanner(System.in);
        int n=s.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++)
        {
            a[i]=s.nextInt();
        }
        Arrays.sort(a);
        int k=s.nextInt();
        int res=binarySearch(a,0,n,k);
        if(res==-1)
        {
            System.out.println("Element is not present");
        }
        else
        {
             System.out.println("Element is found at : "+res);
        }
    }
}

Time complexity :
                Best :O(1)
                Avg :O(log n)
                Worst :O(log n)
Space Complexity : O(log n)
